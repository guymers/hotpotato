package hotpotato
import shapeless._
import shapeless.ops.coproduct._
import hotpotato.coproduct.Unique
import hotpotato.utils.DummyParam
import shapeless.syntax.inject._
import cats.implicits._

// FIXME add function to catch NonFatal and inject into coproduct error
trait ErrorTransSyntax {
  [#
  implicit class ErrorTransCoproductOps1[F[_, _], [# L1 #], R](in: F[[#L1# :+: ] :+: CNil, R]) {
    def handle1[OutL](
      [#func1: L1 => OutL#,
      ]
    )(
      implicit errorTrans: ErrorTrans[F]
    ): F[OutL, R] = {
      errorTrans.bifunctor.leftMap(in) {
        [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => func1(e)#
        ]
        case [1..#Inr(# ]e[1..#)# ] => e.impossible
      }
    }

    def handle1With[OutL](
      [#func1: L1 => F[OutL, R]#,
      ]
    )(
      implicit errorTrans: ErrorTrans[F]
    ): F[OutL, R] = {
      errorTrans.transformErrorF(in) {
        [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => func1(e)#
        ]
        case [1..#Inr(# ]e[1..#)# ] => e.impossible
      }
    }
  }
  # ]

  implicit class ErrorTransCoproductOps[F[_, _], L <: Coproduct, R](in: F[L, R]) {
  [1..8#
    def handleSome[[#L1, L1Out#], BasisRest <: Coproduct, UniqueOut <: Coproduct](
        [#func1: L1 => L1Out#,
        ]
    )(
      implicit basis: Basis.Aux[L, [#L1# :+: ] :+: CNil, BasisRest],
      unique: Unique.Aux[[#L1Out# :+: ] :+: BasisRest, UniqueOut],
      errorTrans: ErrorTrans[F]
    ): F[UniqueOut, R] = {
      errorTrans.bifunctor.leftMap(in) { err =>
        unique.apply {
          basis(err) match {
            case Left(rest) => rest.extendLeftBy[[#L1Out# :+: ] :+: CNil]
            case Right(extracted) => {
              type LOut = [#L1Out# :+: ] :+: BasisRest
              extracted match {
                [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => Coproduct[LOut](func1(e))#
                ]
                case [1..#Inr(# ]e[1..#)# ] => e.impossible
              }
            }
          }
        }
      }
    }
    # ]

  // FIXME: tests
  [1..8#
    def handleSomeWith[[#L1, L1Out#], BasisRest <: Coproduct, UniqueOut <: Coproduct](
        [#func1: L1 => F[L1Out, R]#,
        ]
    )(
      implicit basis: Basis.Aux[L, [#L1# :+: ] :+: CNil, BasisRest],
      unique: Unique.Aux[[#L1Out# :+: ] :+: BasisRest, UniqueOut],
      errorTrans: ErrorTrans[F]
    ): F[UniqueOut, R] = {
      errorTrans.transformErrorF(in) { err =>
        basis(err) match {
          case Left(rest) => errorTrans.pureError(unique.apply(rest.extendLeftBy[[#L1Out# :+: ] :+: CNil]))
          case Right(extracted) => {
            type LOut = [#L1Out# :+: ] :+: BasisRest
            extracted match {
              [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => errorTrans.bifunctor.leftMap(func1(e))(
                lxOut => unique.apply(Coproduct[LOut](lxOut)),
              )#
              ]
              case [1..#Inr(# ]e[1..#)# ] => e.impossible
            }
          }
        }
      }
    }
    # ]

    [1..8#
      def handleSomeInto[[#L1#], OutL, BasisRest <: Coproduct](
        [#func1: L1 => OutL#,
        ]
      )(
        implicit basis: Basis.Aux[L, [#L1# :+: ] :+: CNil, BasisRest],
        errorTrans: ErrorTrans[F]
      ): F[OutL :+: BasisRest, R] = {
        errorTrans.bifunctor.leftMap(in) { err =>
          basis(err) match {
            case Left(rest) => Inr(rest)
            case Right(extracted) => {
              extracted match {
                [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => Inl(func1(e))#
                ]
                case [1..#Inr(# ]e[1..#)# ] => e.impossible
              }
            }
          }
        }
      }
    # ]

    /** Unify all coproduct error types into the common parent type ("least upper bound") */
    def unifyError[UnifiedL](
      implicit errorTrans: ErrorTrans[F],
      unifier: Unifier.Aux[L, UnifiedL]
    ): F[UnifiedL, R] = {
      errorTrans.bifunctor.leftMap(in) { err =>
        unifier(err)
      }
    }

    // Special implementation of throw1 because shapeless Unifier doesn't support upcasting
    // coproduct with single element
    def dieIf[L1 <: Throwable](
      implicit errorTransThrow: ErrorTransThrow[F],
      remove: Remove[L, L1]
    ): F[remove.Rest, R] = {
      errorTransThrow.extractAndThrow(in) { errors =>
        remove(errors)
      }
    }

    [2..8#
    def dieIf[[#L1#]](
      implicit errorTransThrow: ErrorTransThrow[F],
      basis: Basis[L, [#L1 :+:# ] CNil],
      unifier: Unifier.Aux[[#L1# :+: ] :+: CNil, Throwable],
      [2..#dummy0: DummyParam#,
      ]
    ): F[basis.Rest, R] = {
      errorTransThrow.extractAndThrow(in) { errors =>
        basis.apply(errors).swap.leftMap(unifier.apply(_))
      }
    }
    # ]

  }

  implicit class ErrorTransOps[F[_, _], L, R](in: F[L, R]) {
     [1..8#
     def handleSomeAdt[[#L1, L1Out#], LCopRepr <: Coproduct, LCopRest <: Coproduct](
        [#func1: L1 => L1Out#,
        ]
     )(
       implicit errorTrans: ErrorTrans[F],
       gen: Generic.Aux[L, LCopRepr],
       basisRemoveFromAdt: Basis.Aux[LCopRepr, [#L1 :+:# ] CNil, LCopRest]
     ): F[[#L1Out :+:# ] LCopRest, R] = {
       errorTrans.bifunctor.leftMap(in) { err =>
         basisRemoveFromAdt(gen.to(err)) match {
           case Left(lcopRest) => lcopRest.extendLeftBy[[#L1Out :+:# ] CNil]
           case Right(handledCases) => {
             type FinalL = [#L1Out :+:# ] LCopRest
             handledCases match {
              [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => func1(e).inject[FinalL]#
              ]
              case [1..#Inr(# ]e[1..#)# ] => e.impossible
             }
           }
         }
       }
     }
     # ]

     [1..8#
     def handleSomeAdtInto[[#L1#], OutL, LCopRepr <: Coproduct, LCopRest <: Coproduct](
       [#func1: L1 => OutL#,
       ]
     )(
       implicit errorTrans: ErrorTrans[F],
       gen: Generic.Aux[L, LCopRepr],
       basisRemoveFromAdt: Basis.Aux[LCopRepr, [#L1 :+:# ] CNil, LCopRest]
     ): F[OutL :+: LCopRest, R] = {
       errorTrans.bifunctor.leftMap(in) { err =>
         basisRemoveFromAdt(gen.to(err)) match {
           case Left(lcopRest) => lcopRest.extendLeft[OutL]
           case Right(handledCases) => {
             handledCases match {
              [1..#case [2..#Inr(# ]Inl(e)[2..#)# ] => Inl(func1(e))#
              ]
              case [1..#Inr(# ]e[1..#)# ] => e.impossible
             }
           }
         }
       }
     }
     # ]

    /**
     * Split an error (which is a sealed trait) into its coproduct representation
     * (A coproduct of its children types)
     */
    def splitError[LCopRepr <: Coproduct](
      implicit errorTrans: ErrorTrans[F],
        gen: Generic.Aux[L, LCopRepr]
    ): F[LCopRepr, R] = errorTrans.bifunctor.leftMap(in)(l => gen.to(l))
  }

}
